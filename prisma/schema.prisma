generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  email      String         @unique
  password   String?         
  name       String
  address    String
  city       String
  zipCode    String
  country    String
  profilepic UserProfilepic?
  isOAuth    Boolean?
  provider   Provider      @default(standard)
  role       Role           @default(user)


  status     Status         @default(pending)

  
  emailConfirmationCode   String



}



model Product {


    id                String         @id @default(auto()) @map("_id") @db.ObjectId
    name              String         @unique
    description       String
    sku               String
    productImage      String[]
    // categories        String[]
    price             Int
    discountedprice   Int
    color             String[] // ARRAY OF COLORS HOGA REAL ME
    sizes             String[] // ARRAY OF SIZES HOGA REAL ME
    leftinstock       Int
    features          Features[]

    belongsToIDS      String[]          @db.ObjectId

    belongTo          CategoryCheck[]     @relation(fields: [belongsToIDS],references:[id])

    // categoryIDs       String[]          @db.ObjectId
    // categories        Category[]       @relation(fields: [categoryIDs], references: [id])


}

model CategoryCheck {

  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            CategsNames

  productIDS      String[]      @db.ObjectId
  products        Product[]       @relation(fields: [productIDS],references: [id])

}


// model Category {
//   id              String          @id @default(auto()) @map("_id") @db.ObjectId
//   name            CategsNames     
//   productIDs      String[]        @db.ObjectId
//   products        Product[]       @relation(fields: [productIDs], references: [id])
// }


model Orders {

  id              String          @id @default(auto()) @map("_id") @db.ObjectId

  createdAt       DateTime        @default(now())


  


}



type Features{

  type     FeatureType   
  answer   String

}


enum FeatureType {
  
  Sleeve
  Fit
  Cuff_Style      @map("Cuff Style")
  Collar_Style    @map("Collar Style")
  Pattern 
  Style 
  Material 
}


enum CategsNames {
  RugbyShirts      @map("Rugby Shirts")
  Sweatshirts
  Sweaters
  Hoodies
  Zippers
  SweatPants      @map("Sweat Pants")
  Jackets
  LongCoats      @map("Long Coats")
  TrenchCoats    @map("Trench Coats")
  ShacketsShirts   @map("Shackets Shirts")
  ThermalSuits   @map("Thermal Suits")
  PakolCaps      @map("Pakol Caps")
  MensShawls     @map("Mens Shawls")
  CoOrdSets     @map("Co-Ord Sets")
}



enum Status {
  pending
  active
}


type UserProfilepic {
  avatarurl String
}


enum Provider {
  google
  twitter
  standard
}

enum Role {
  user
  admin
  editor
}
